version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/AYFnzAZ9FsMiksutaHQrvr/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    parameters:
      workflow_id:
        type: string
    steps:
      - checkout
      - run:
          name: Install Tar and Gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: << parameters.workflow_id >>

  configure_infrastructure:
    docker:
      - image: python:3.8
    parameters:
      workflow_id:
        type: string
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:51:0c:53:07:0c:55:7c:f2:d5:dd:c7:f9:18:88:6d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y awscli
            pip install ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Run Playbook and Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: << parameters.workflow_id >>

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    parameters:
      workflow_id:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.log
      - run:
          name: Send migration results to memstash
          command: |
            cat ./backend/migrations_dump.log
            if grep -q "has been executed successfully." ./backend/migrations_dump.log
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/AYFnzAZ9FsMiksutaHQrvr/migration_<< parameters.workflow_id >>  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: nikolaik/python-nodejs:python3.8-nodejs14
    parameters:
      workflow_id:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Install Aws CLI Ansible
            apt-get update
            apt-get install -y awscli ansible
            # Install dependencies
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: << parameters.workflow_id >>

  deploy-backend:
    docker:
      - image: nikolaik/python-nodejs:python3.8-nodejs14
    parameters:
      workflow_id:
        type: string
    working_directory: /tmp/workspace
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:51:0c:53:07:0c:55:7c:f2:d5:dd:c7:f9:18:88:6d"]
      - run:
          name: install python and aws cli
          command: |
            apt-get update
            apt-get install -y awscli
            apt-get install -y rsync
            pip install ansible
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: << parameters.workflow_id >>

  smoke-test:
    docker:
      - image: amazon/aws-cli
    parameters:
      workflow_id:
        type: string
    steps:
      - checkout
      - run:
          name: Install Tar and Gzip
          command: |
            yum install -y curl tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            sleep 120
            BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)
            echo "Backend IP: ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - revert-migrations:
          workflow_id: << parameters.workflow_id >>
      # - destroy-environment:
      #     workflow_id: << parameters.workflow_id >>

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    parameters:
      workflow_id:
        type: string
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run: |
          yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y
          yum install jq -y
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            export newWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo New workflow Id: "${newWorkflowID}"
            echo Old workflow Id: "${OldWorkflowID}"
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]] && [[ -n "$OldWorkflowID" ]]
            then
              echo deleting old stuff
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "cloudfront-stack-${OldWorkflowID}"
            fi
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=assignment3 \
            --stack-name "cloudfront-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
          environment:
            TERM: xterm-color

      - destroy-environment:
          workflow_id: << parameters.workflow_id >>

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - configure_infrastructure:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - deploy-frontend:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          requires: [run-migrations]
      - deploy-backend:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          requires: [run-migrations]
      - smoke-test:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}